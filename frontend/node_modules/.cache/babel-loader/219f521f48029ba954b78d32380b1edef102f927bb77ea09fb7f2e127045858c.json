{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ELHAMRI\\\\Desktop\\\\EMSI\\\\S2\\\\Projet\\\\QGen\\\\frontend\\\\src\\\\components\\\\common\\\\ProtectedRoute.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { Navigate } from 'react-router-dom';\nimport { useAuth } from '../../context/AuthContext';\n\n// Protected route component to check if user is authenticated and has correct role\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ProtectedRoute = ({\n  children,\n  role\n}) => {\n  _s();\n  const {\n    currentUser,\n    checkTokenValidity\n  } = useAuth();\n  const [isChecking, setIsChecking] = useState(true);\n  const [isValid, setIsValid] = useState(false);\n\n  // Effet pour vérifier la validité du token à chaque montage du composant\n  useEffect(() => {\n    const validateToken = async () => {\n      setIsChecking(true);\n      console.log(\"ProtectedRoute: checking user authentication\");\n      console.log(\"Current user:\", currentUser);\n      if (currentUser) {\n        const valid = await checkTokenValidity();\n        console.log(\"Token validity check result:\", valid);\n        setIsValid(valid);\n      } else {\n        console.log(\"No current user found\");\n        setIsValid(false);\n      }\n      setIsChecking(false);\n    };\n    validateToken();\n  }, [checkTokenValidity, currentUser]);\n\n  // Afficher un loader pendant la vérification\n  if (isChecking) {\n    console.log(\"Still checking token validity...\");\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"V\\xE9rification de l'authentification...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 12\n    }, this);\n  }\n  console.log(\"ProtectedRoute decision - currentUser:\", currentUser, \"isValid:\", isValid);\n  if (!currentUser || !isValid) {\n    // User is not logged in or token is invalid\n    console.log(\"User not authenticated, redirecting to login\");\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 12\n    }, this);\n  }\n  if (role && currentUser.role !== role) {\n    // User doesn't have the required role\n    console.log(`User role ${currentUser.role} doesn't match required role ${role}, redirecting`);\n\n    // Redirect to their appropriate dashboard\n    switch (currentUser.role) {\n      case 'admin':\n        return /*#__PURE__*/_jsxDEV(Navigate, {\n          to: \"/admin\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 16\n        }, this);\n      case 'professor':\n        return /*#__PURE__*/_jsxDEV(Navigate, {\n          to: \"/professor\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 16\n        }, this);\n      case 'student':\n        return /*#__PURE__*/_jsxDEV(Navigate, {\n          to: \"/student\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 16\n        }, this);\n      default:\n        return /*#__PURE__*/_jsxDEV(Navigate, {\n          to: \"/login\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 16\n        }, this);\n    }\n  }\n\n  // User is authenticated and has the right role\n  console.log(\"User is authenticated with correct role, rendering protected content\");\n  return children;\n};\n_s(ProtectedRoute, \"H82HiZyTJJ455hwBhV6Lvs61BuM=\", false, function () {\n  return [useAuth];\n});\n_c = ProtectedRoute;\nexport default ProtectedRoute;\nvar _c;\n$RefreshReg$(_c, \"ProtectedRoute\");","map":{"version":3,"names":["React","useEffect","useState","Navigate","useAuth","jsxDEV","_jsxDEV","ProtectedRoute","children","role","_s","currentUser","checkTokenValidity","isChecking","setIsChecking","isValid","setIsValid","validateToken","console","log","valid","fileName","_jsxFileName","lineNumber","columnNumber","to","_c","$RefreshReg$"],"sources":["C:/Users/ELHAMRI/Desktop/EMSI/S2/Projet/QGen/frontend/src/components/common/ProtectedRoute.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { Navigate } from 'react-router-dom';\r\nimport { useAuth } from '../../context/AuthContext';\r\n\r\n// Protected route component to check if user is authenticated and has correct role\r\nconst ProtectedRoute = ({ children, role }) => {\r\n  const { currentUser, checkTokenValidity } = useAuth();\r\n  const [isChecking, setIsChecking] = useState(true);\r\n  const [isValid, setIsValid] = useState(false);\r\n\r\n  // Effet pour vérifier la validité du token à chaque montage du composant\r\n  useEffect(() => {\r\n    const validateToken = async () => {\r\n      setIsChecking(true);\r\n      console.log(\"ProtectedRoute: checking user authentication\");\r\n      console.log(\"Current user:\", currentUser);\r\n      \r\n      if (currentUser) {\r\n        const valid = await checkTokenValidity();\r\n        console.log(\"Token validity check result:\", valid);\r\n        setIsValid(valid);\r\n      } else {\r\n        console.log(\"No current user found\");\r\n        setIsValid(false);\r\n      }\r\n      \r\n      setIsChecking(false);\r\n    };\r\n    \r\n    validateToken();\r\n  }, [checkTokenValidity, currentUser]);\r\n\r\n  // Afficher un loader pendant la vérification\r\n  if (isChecking) {\r\n    console.log(\"Still checking token validity...\");\r\n    return <div>Vérification de l'authentification...</div>;\r\n  }\r\n\r\n  console.log(\"ProtectedRoute decision - currentUser:\", currentUser, \"isValid:\", isValid);\r\n\r\n  if (!currentUser || !isValid) {\r\n    // User is not logged in or token is invalid\r\n    console.log(\"User not authenticated, redirecting to login\");\r\n    return <Navigate to=\"/login\" />;\r\n  }\r\n\r\n  if (role && currentUser.role !== role) {\r\n    // User doesn't have the required role\r\n    console.log(`User role ${currentUser.role} doesn't match required role ${role}, redirecting`);\r\n    \r\n    // Redirect to their appropriate dashboard\r\n    switch (currentUser.role) {\r\n      case 'admin':\r\n        return <Navigate to=\"/admin\" />;\r\n      case 'professor':\r\n        return <Navigate to=\"/professor\" />;\r\n      case 'student':\r\n        return <Navigate to=\"/student\" />;\r\n      default:\r\n        return <Navigate to=\"/login\" />;\r\n    }\r\n  }\r\n\r\n  // User is authenticated and has the right role\r\n  console.log(\"User is authenticated with correct role, rendering protected content\");\r\n  return children;\r\n};\r\n\r\nexport default ProtectedRoute;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}